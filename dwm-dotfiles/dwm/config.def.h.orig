/* See LICENSE file for copyright and license details. */

/* -------------------- Appearance -------------------- */
static const unsigned int borderpx  = 2;   /* border pixel of windows */
static const unsigned int snap      = 32;  /* snap pixel */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayonleft = 0;    /* 0: systray in the right corner, >0: systray on left of status text */
static const unsigned int systrayspacing = 8;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;        /* 0 means no systray */

static const int showbar     = 1;          /* 0 = no bar */
static const int topbar      = 1;          /* 0 = bottom bar */
static const int barpad_top = 8;   /* padding atas bar */
static const int barpad_bot = 4;    /* padding bawah bar */
static const int sidepad     = 10;          /* margin left/right for bar */
static const char *fonts[]   = { "DroidSansM Nerd Font:size=12" };
static const char dmenufont[] = "DroidSansM Nerd Font:size=12";

/* -------------------- Colors (Nord) -------------------- */
static const char col_bg[]    = "#2E3440";
static const char col_fg[]    = "#D8DEE9";
static const char col_blk[]   = "#3B4252";
static const char col_red[]   = "#BF616A";
static const char col_grn[]   = "#A3BE8C";
static const char col_ylw[]   = "#EBCB8B";
static const char col_blu[]   = "#81A1C1";
static const char col_mag[]   = "#B48EAD";
static const char col_cyn[]   = "#88C0D0";
static const char col_brblk[] = "#4C566A";

static const char *colors[][3] = {
    /*               fg      bg      border   */
    [SchemeNorm] = { col_fg, col_bg, col_brblk },
    [SchemeSel]  = { col_blu, col_bg, col_cyn  },
};

/* gaps (for vanitygaps patch) */
static int gappih = 8;  /* horiz inner gap between windows */
static int gappiv = 8;  /* vert inner gap between windows */
static int gappoh = 10;  /* horiz outer gap between windows and screen edge */
static int gappov = 12;  /* vert outer gap between windows and screen edge */
static int smartgaps = 0; /* 1 means no outer gap when there is only one window */

/* -------------------- Transparency -------------------- */
#define OPAQUE      0xffU
#define baralpha    0xeeU
#define borderalpha OPAQUE

static const unsigned int alphas[][3] = {
    [SchemeNorm] = { OPAQUE, baralpha, borderalpha },
    [SchemeSel]  = { OPAQUE, baralpha, borderalpha },
};

/* -------------------- Bar -------------------- */
static const int horizpadbar = 10;  /* padding top/bottom for bar */
static const int vertpadbar = 10;  /* padding left/right for bar */

/* -------------------- Tags -------------------- */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };

/* -------------------- Undeline Tags -------------------- */
static const unsigned int ulinepad = 5;    /* horizontal padding between the underline and tag */
static const unsigned int ulinestroke  = 2;    /* thickness / height of the underline */
static const unsigned int ulinevoffset = 0;    /* how far above the bottom of the bar the line should appear */
static const int ulineall      = 0;    /* 1 to show underline on all tags, 0 for just the active ones */

static const Rule rules[] = {
	/* class      instance    title       tags mask     isfloating   monitor */
	{ "Gimp",            NULL,       NULL,       0,            1,           -1 },
  { "Brave-browser",   NULL,       NULL,       1 << 2,       0,           -1 },
	{ "firefox",         NULL,       NULL,       1 << 1,       0,           -1 },
	{ "zen",             NULL,       NULL,       1 << 1,       0,           -1 },
	{ "discord",         NULL,       NULL,       1 << 3,       0,           -1 },
	{ "Code",            NULL,       NULL,       1 << 4,       0,           -1 },
	{ "Thunar",          NULL,       NULL,       1 << 5,       0,           -1 },
};

/* -------------------- Layout(s) -------------------- */
static const float mfact        = 0.55; /* master area size [0.05..0.95] */
static const int nmaster        = 1;    /* number of clients in master area */
static const int resizehints    = 1;    /* 1 = respect size hints */
static const int attachbelow = 1;    /* 1 means attach after the currently active window */
static const int lockfullscreen = 1;    /* 1 = force focus on fullscreen */
static const int refreshrate    = 144;  /* refresh rate */

#define FORCE_VSPLIT 1
#include "vanitygaps.c"
#include "tatami.c"

static const Layout layouts[] = {
    /* symbol     arrange function */
    { "[]=",      tile },                   // 0: tiling
    { "[M]",      monocle },                // 1: monocle
    { "[@]",      spiral },                 // 2: fibonacci spiral
    { "[\\]",     dwindle },                // 3: fibonacci dwindle
    { "H[]",      deck },                   // 4: deck
    { "TTT",      bstack },                 // 5: bottom stack
    { "===",      bstackhoriz },            // 6: bottom stack horizontal
    { "HHH",      grid },                   // 7: grid
    { "###",      nrowgrid },               // 8: n-row grid
    { "---",      horizgrid },              // 9: horizontal grid
    { ":::",      gaplessgrid },            // 10: gapless grid
    { "|M|",      centeredmaster },         // 11: centered master
    { ">M>",      centeredfloatingmaster }, // 12: centered floating master
    { "|+|",      tatami },                 // 13: tatami 
    { "><>",      NULL },                   // 14: tile
    { NULL,       NULL },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG)                                                                                               \
       &((Keychord){1, {{MODKEY, KEY}},                                        view,           {.ui = 1 << TAG} }), \
       &((Keychord){1, {{MODKEY|ControlMask, KEY}},                            toggleview,     {.ui = 1 << TAG} }), \
       &((Keychord){1, {{MODKEY|ShiftMask, KEY}},                              tag,            {.ui = 1 << TAG} }), \
       &((Keychord){1, {{MODKEY|ControlMask|ShiftMask, KEY}},                  toggletag,      {.ui = 1 << TAG} }),

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }
#include <X11/XF86keysym.h>

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, NULL };
static const char *termcmd[] = { "alacritty", NULL };

/* Volome Control */
static const char *upvol[]   = { "pactl", "set-sink-volume",   "@DEFAULT_SINK@", "+5%", NULL };
static const char *downvol[] = { "pactl", "set-sink-volume",   "@DEFAULT_SINK@", "-5%", NULL };
static const char *mutevol[] = { "pactl", "set-sink-mute",     "@DEFAULT_SINK@", "toggle", NULL };
static const char *unmutevol[] = { "pactl", "set-sink-mute", "@DEFAULT_SINK@", "0", NULL };

/* Screenshot commands (POSIX sh compatible) */
static const char *scrotfullclip[] = { "/bin/sh", "-c", "maim | xclip -selection clipboard -t image/png", NULL };
static const char *scrotselclip[]  = { "/bin/sh", "-c", "maim -s | xclip -selection clipboard -t image/png", NULL };
static const char *scrotfullfile[] = { "/bin/sh", "-c", "maim \"$HOME/Pictures/Screenshot_$(date +%Y-%m-%d_%H-%M-%S).png\"", NULL };
static const char *scrotselfile[]  = { "/bin/sh", "-c", "maim -s \"$HOME/Pictures/Screenshot_$(date +%Y-%m-%d_%H-%M-%S).png\"", NULL };

/* -------------------- Keys -------------------- */
#include "movestack.c"
static Keychord *keychords[] = {
    /* Program launcher & system */
    &((Keychord){1, {{MODKEY, XK_d}},                          spawn,          {.v = dmenucmd } }),
    &((Keychord){1, {{MODKEY, XK_Return}},                     spawn,          {.v = termcmd } }),
    &((Keychord){1, {{MODKEY, XK_b}},                          togglebar,      {0} }),
    &((Keychord){1, {{MODKEY, XK_j}},                          focusstack,     {.i = +1 } }),
    &((Keychord){1, {{MODKEY, XK_k}},                          focusstack,     {.i = -1 } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_j}},                movestack,      {.i = +1 } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_k}},                movestack,      {.i = -1 } }),
    &((Keychord){1, {{MODKEY, XK_c}},                          incnmaster,     {.i = +1 } }),
    &((Keychord){1, {{MODKEY, XK_p}},                          incnmaster,     {.i = -1 } }),
    &((Keychord){1, {{MODKEY, XK_h}},                          setmfact,       {.f = -0.05} }),
    &((Keychord){1, {{MODKEY, XK_l}},                          setmfact,       {.f = +0.05} }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_h}},                setcfact,       {.f = +0.25} }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_l}},                setcfact,       {.f = -0.25} }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_o}},                setcfact,       {.f =  0.00} }),
    &((Keychord){1, {{MODKEY, XK_z}},                          zoom,           {0} }),
    &((Keychord){1, {{MODKEY, XK_Tab}},                        view,           {0} }),
    &((Keychord){1, {{MODKEY, XK_q}},                          killclient,     {0} }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_q}},                quit,           {0} }),
    &((Keychord){1, {{MODKEY, XK_r}},                          quit,           {1} }),
    &((Keychord){1, {{MODKEY, XK_space}},                      setlayout,      {0} }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_space}},            togglefloating, {0} }),
    // &((Keychord){1, {{MODKEY|ShiftMask, XK_f}},                togglefullscr,  {0} }),
    &((Keychord){1, {{MODKEY, XK_0}},                          view,           {.ui = ~0 } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_0}},                tag,            {.ui = ~0 } }),
    &((Keychord){1, {{MODKEY, XK_comma}},                      focusmon,       {.i = -1 } }),
    &((Keychord){1, {{MODKEY, XK_period}},                     focusmon,       {.i = +1 } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_comma}},            tagmon,         {.i = -1 } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_period}},           tagmon,         {.i = +1 } }),

    /* Volume control */
    &((Keychord){1, {{0, XF86XK_AudioRaiseVolume}},            spawn,          {.v = upvol } }),
    &((Keychord){1, {{0, XF86XK_AudioLowerVolume}},            spawn,          {.v = downvol } }),
    &((Keychord){1, {{0, XF86XK_AudioMute}},                   spawn,          {.v = mutevol } }),
    &((Keychord){1, {{MODKEY|ShiftMask, XK_m}},                spawn,          {.v = unmutevol} }),

    /* Screen lock using SHCMD */
    &((Keychord){1, {{MODKEY|ShiftMask, XK_x}},                spawn,          SHCMD("slock") }),

    /* Vanitygaps: Mod+i + key */
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_u}},               incrgaps,       {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_u}},       incrgaps,       {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_i}},               incrigaps,      {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_i}},       incrigaps,      {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_o}},               incrogaps,      {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_o}},       incrogaps,      {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_6}},               incrihgaps,     {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_6}},       incrihgaps,     {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_7}},               incrivgaps,     {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_7}},       incrivgaps,     {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_8}},               incrohgaps,     {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_8}},       incrohgaps,     {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_9}},               incrovgaps,     {.i = +1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_9}},       incrovgaps,     {.i = -1 } }),
    &((Keychord){2, {{MODKEY, XK_i}, {0, XK_0}},               togglegaps,     {0} }),
    &((Keychord){2, {{MODKEY, XK_i}, {ShiftMask, XK_0}},       defaultgaps,    {0} }),

    /* Layouts: Mod+a + key */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_t}},               setlayout,      {.v = &layouts[0]} }),  /* []= tile */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_m}},               setlayout,      {.v = &layouts[1]} }),  /* [M] monocle */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_s}},               setlayout,      {.v = &layouts[2]} }),  /* [@] spiral */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_d}},               setlayout,      {.v = &layouts[3]} }),  /* [\] dwindle */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_h}},               setlayout,      {.v = &layouts[4]} }),  /* H[] deck */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_b}},               setlayout,      {.v = &layouts[5]} }),  /* TTT bstack */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_v}},               setlayout,      {.v = &layouts[6]} }),  /* === bstackhoriz */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_g}},               setlayout,      {.v = &layouts[7]} }),  /* HHH grid */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_n}},               setlayout,      {.v = &layouts[8]} }),  /* ### nrowgrid */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_r}},               setlayout,      {.v = &layouts[9]} }),  /* --- horizgrid */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_c}},               setlayout,      {.v = &layouts[10]} }), /* ::: gaplessgrid */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_y}},               setlayout,      {.v = &layouts[11]} }), /* |M| centeredmaster */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_f}},               setlayout,      {.v = &layouts[12]} }), /* >M> centeredfloatingmaster */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_a}},               setlayout,      {.v = &layouts[13]} }), /* |+| tatami */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_i}},               setlayout,      {.v = &layouts[14]} }), /*<>> no floating */
    &((Keychord){2, {{MODKEY, XK_a}, {0, XK_space}},           setlayout,      {0} }),                 /* toggle last/floating */

    /* Screenshot keybindings */
    &((Keychord){1, {{MODKEY, XK_Print}},                      spawn,          {.v = scrotfullclip} }),  /* Super + Print → full ke clipboard */
    &((Keychord){1, {{0, XK_Print}},                           spawn,          {.v = scrotselclip} }),   /* Print → select ke clipboard */
    &((Keychord){2, {{MODKEY, XK_s}, {0, XK_Print}},           spawn,          {.v = scrotfullfile} }),  /* Super + f + Print → full ke file */
    &((Keychord){2, {{MODKEY, XK_s}, {0, XK_s}},               spawn,          {.v = scrotselfile} }),   /* Super + f + s → select ke file */

    /* Tag keys */
    TAGKEYS( XK_1, 0) TAGKEYS( XK_2, 1) TAGKEYS( XK_3, 2)
    TAGKEYS( XK_4, 3) TAGKEYS( XK_5, 4) TAGKEYS( XK_6, 5)
    TAGKEYS( XK_7, 6) TAGKEYS( XK_8, 7) TAGKEYS( XK_9, 8)
};

/* -------------------- Mouse buttons -------------------- */
static const Button buttons[] = {
    { ClkLtSymbol,   0,              Button1, setlayout,      { 0 } },
    { ClkLtSymbol,   0,              Button3, setlayout,      { .v = &layouts[2] } },
    { ClkStatusText, 0,              Button2, spawn,          { .v = termcmd } },
    { ClkClientWin,  MODKEY,         Button1, movemouse,      { 0 } },
    { ClkClientWin,  MODKEY,         Button2, togglefloating, { 0 } },
    { ClkClientWin,  MODKEY,         Button3, resizemouse,    { 0 } },
    { ClkTagBar,     0,              Button1, view,           { 0 } },
    { ClkTagBar,     0,              Button3, toggleview,     { 0 } },
    { ClkTagBar,     MODKEY,         Button1, tag,            { 0 } },
    { ClkTagBar,     MODKEY,         Button3, toggletag,      { 0 } },
};
